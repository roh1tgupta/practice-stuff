why hosting happens in js language
https://sidhujaspreet963.medium.com/advance-javascript-why-hoisting-3db74309e674

JavaScript defines seven built-in types:
null
undefined
boolean
number
bigint(new in ECMAScript 2020)
string
object
symbol -- added in ES6!
Note: All of these types except object are called "primitives".(currenlty there are 7 primitive data types in js)
typeof undefined === "undefined"; // true
typeof true === "boolean"; // true
typeof 42 === "number"; // true
typeof "42" === "string"; // true
typeof { life: 42 } === "object"; // true
// added in ES6!
typeof Symbol() === "symbol"; // true

// Numbers
typeof 37 === "number";
typeof 3.14 === "number";
typeof 42 === "number";
typeof Math.LN2 === "number";
typeof Infinity === "number";
typeof NaN === "number"; // Despite being "Not-A-Number"
typeof Number("1") === "number"; // Number tries to parse things into numbers
typeof Number("shoe") === "number"; // including values that cannot be type coerced to a number
typeof 42n === "bigint";
typeof typeof BigInt(42) === "bigint";

// Strings
typeof "" === "string";
typeof "bla" === "string";
typeof `template literal` === "string";
typeof "1" === "string"; // note that a number within a string is still typeof string
typeof typeof 1 === "string"; // typeof always returns a string
typeof String(1) === "string"; // String converts anything into a string, safer than toString

// Booleans
typeof true === "boolean";
typeof false === "boolean";
typeof Boolean(1) === "boolean"; // Boolean() will convert values based on if they're truthy or
falsy
typeof !!1 === "boolean"; // two calls of the ! (logical NOT) operator are equivalent to Boolean()
// Symbols
typeof Symbol() === "symbol";
typeof Symbol("foo") === "symbol";
typeof Symbol.iterator === "symbol";
// Undefined
typeof undefined === "undefined";
typeof declaredButUndefinedVariable === "undefined";
typeof undeclaredVariable === "undefined";
// Objects
typeof { a: 1 } === "object";
// use Array.isArray or Object.prototype.toString.call
// to differentiate regular objects from arrays
typeof [1, 2, 4] === "object";
typeof new Date() === "object";
typeof /regex/ === "object"; // See Regular expressions section for historical results
// The following are confusing, dangerous, and wasteful. Avoid them.
typeof new Boolean(true) === "object";
typeof new Number(1) === "object";
typeof new String("abc") === "object";
// Functions
typeof function() {} === "function";
typeof class C {} === "function";
typeof Math.sin === "function";

Undefined vs Null: Undefined is the absence of definiQon, it has yet to be defined, and null is the absence of value, there is no value there.

typeof null === "object"; // true
It would have been nice (and correct!) if it returned "null" , but this original bug in JS has
persisted for nearly two decades, and will likely never be fixed because there's too much
existing web content that relies on its buggy behavior that "fixing" the bug would create more
"bugs" and break a lot of web software.
If you want to test for a null value using its type, you need a compound condition:
var a = null;
(!a && typeof a === "object"); // true
null is the only primitive value that is "falsy" (aka false-like) but that also
returns "object" from the typeof check.
typeof function a(){ /* .. */ } === "function"; // true

In JavaScript, variables don't have types -- values have types. Variables can hold any
value, at any time.

The typeof operator always returns a string. So:
typeof typeof 42; // "string"

a function is referred to as a "callable object" -- an object
that has an internal [[Call]] property that allows it to be invoked.

function a(b,c) {
/* .. */
}

The function object has a length property set to the number of formal parameters it is
declared with.
a.length; // 2

If you use typeof against a variable, it's not asking "what's the type of the variable?" as it
may seem, since JS variables have no types. Instead, it's asking "what's the type of the
value in the variable?"

Variables that have no value currently, actually have the undefined value. Calling typeof
against such variables will return "undefined" 

undefined is a value that a declared variable can hold.
"Undeclared" means a variable has never been declared.
JavaScript unfortunately kind of conflates these two terms, not only in its error messages
("ReferenceError: a is not defined") but also in the return values of typeof , which is
"undefined" for both cases.

Array.from(..) has several powerful capabilities, refer to ES6

strings and array are not same in javascript
strings are immutable while arraya are mutable.

array.reverse() is valid but string.reverse() is not.  refer to https://github.com/mathiasbynens/esrever

It would be much more accurate to think of NaN as being
"invalid number," "failed number," or even "bad number," than to think of it as "not a number."
var a = 2 / "foo"; // NaN
typeof a === "number"; // true

NaN is a very special value in that it's never equal to another NaN value (i.e., it's never
equal to itself). It's the only value, in fact, that is not reflexive (without the Identity
characteristic x === x ). So, NaN !== NaN .

-0 === 0 //true

Object.is(..) for special equality
var a = 2 / "foo";
var b = -3 * 0;
Object.is( a, NaN ); // true
Object.is( b, -0 ); // true
Object.is( b, 0 ); // false

polyfills is needed for prees-6 environment

Object.is(..) probably shouldn't be used in cases where == or === are known to be
safe

Object.is() is also not equivalent to the === operator. The only difference between 
Object.is() and === is in their treatment of signed zeros and NaN values


there are no Null() or Undefined() native constructors, but nevertheless
the "Null" and "Undefined" are the internal [[Class]] values exposed.
Object.prototype.toString.call( null ); // "[object Null]"
Object.prototype.toString.call( undefined ); // "[object Undefined]"

But for the other simple primitives like string , number , and boolean , another behavior
actually kicks in, which is usually called "boxing"
Object.prototype.toString.call( "abc" ); // "[object String]"
Object.prototype.toString.call( 42 ); // "[object Number]"
Object.prototype.toString.call( true ); // "[object Boolean]"

These object wrappers serve a very important purpose. Primitive values don't have
properties or methods, so to access .length or .toString() you need an object wrapper
around the value.

There are some gotchas with using the object wrappers directly that you should be aware of
if you do choose to ever use them.
For example, consider Boolean wrapped values:
var a = new Boolean( false );
if (!a) {
 console.log( "Oops" ); // never runs
}
The problem is that you've created an object wrapper around the false value, but objects
themselves are "truthy"


Note: An array with at least one "empty slot" in it is often called a "sparse array."


const shallowObj = { ...originalObj };  // shallow copy
// shallowObj points to a new location 2, but references location 1 for the nested
object
const deepObj = JSON.parse(JSON.stringify(originalObj));   // deepcopy
// deepObj clones all parts of the object to a new memory address

(function() {}.contructor === Function);
// true
// function constructor
new Function("optionalArguments", "functionBody");
const four = new Function("return 4"); // 4
const sum = new Function("x", "y", "return x + y");
console.log(sum(2, 3)); // 5

Callable Object:
Because funcBons are objects in JavaScript, this also gives them the ability to have properties added to them. This creates a callable object, a special object that creates properties not available on normal objects. 


In programming language design, a first-class citizen (also type, object, entity, or value) in a given programming language is an entity which supports all the operations generally available to other entities.
Functions are first-class citizens in JavaScript All this means is that functions can be passed around as if they were a JavaScript type. Anything that can be done with other 7n hhb , can also be done with functions.

