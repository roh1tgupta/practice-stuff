javascript libraries
socket.io,chart.js,D3.js,pdf.js,Foundation js framework,react bootstrap, echart.js,
Moment.js,Nuxt.js(vue.js metaframework),video.js,

js cheatsheet  https://www.w3schools.com/jsref/

In JavaScript, when you perform an arithmetic operation involving a string and a number,
the JavaScript engine attempts to convert the string to a number. This process is known as type coercion.


SOLID PRINCIPLE:
S(Single-responsibility Principle): A class should have one and only one reason to change, meaning
  that a class should have only one job.
O(Open-closed Principle): Objects or entities should be open for extension, but closed for modification.
L(Liskov substitution principle): Let q(x) be a property provable about objects of x of type T.
  Then q(y) should be provable for objects y of type S where S is a subtype of T.
  // All this is stating is that every subclass/derived class should be substitutable for their base/parent class.
I(Interface segregation principle): A client should never be forced to implement an interface that it
  doesn't use or clients shouldn't be forced to depend on methods they do not use.
D(Dependency Inversion principle): Entities must depend on abstractions not on concretions. It states that
  the high level module must not depend on the low level module, but they should depend on abstractions.


Mutable is a type of variable that can be changed. In JavaScript, only objects and arrays are mutable, not primitive values.
(You can make a variable name point to a new value, but the previous value is still held in memory.
Hence the need for garbage collection.)
A mutable object is an object whose state can be modified after it is created.
Immutables are the objects whose state cannot be changed once the object is created.
Strings and Numbers are Immutable. Lets understand this with an example:

var immutableString = "Hello";
// In the above code, a new object with string value is created.
immutableString = immutableString + "World";
// We are now appending "World" to the existing value.

On appending the "immutableString" with a string value, following events occur:
  >Existing value of "immutableString" is retrieved
  >"World" is appended to the existing value of "immutableString"
  >The resultant value is then allocated to a new block of memory
  >"immutableString" object now points to the newly created memory space
  >Previously created memory space is now available for garbage collection.


console.log("javascript everywhere" instanceof String);
// false ...string literal is not an object

console.log(new String("javascript everywhere") instanceof Object);  // true
console.log(new String("javascript everywhere") instanceof String); // true

console.log(new Array(3).toString()); // ",,"
console.log(new Array(4).toString()); // ",,,"

console.log([1] + [] + "javascript".split('')); // 1j,a,v,a,s,c,r,i,p,t
console.log([1] + [] + [5]); // 15
console.log([1] + [1,3] + [5,2]); //11,35,2
console.log([1,1] + [1,3] + [5,2]); //1,11,35,2
console.log([1, 1] + [] + [5, 'rohit']); // 1,15,rohit
output of above five are in string literal format

console.log('1' - - '1'); // 2
console.log('1' + '1'); // 11
console.log('1' + 1); // 11
console.log(1 + '1'); // 11
console.log(1 + 1); // 2
console.log('1' + + + + ... '1'); //11
console.log('1' + + + +  1); //11
console.log(1 + + + +  1); // 2
console.log(1 + + + +  '1');//2
console.log(1 + +'1');//2
console.log('1' ++ '1'); // syntax error

String.fromCharCode(65);// A
var str = "Hello world!";
str.repeat(2);// Hello world!Hello world!

var arry = [10,20,20]; arry[5]=78; 
arry; // [10, 20, 20, empty � 2, 78]
arry.push(66);
arry // [10, 20, 20, empty � 2, 78, 66]
arry[3] // undefined
arry[4] // undefined
arry[5] // 78

let arr = ['a', 'b', 'c'];
arr.unshift('d'); o/p: 4 // now arr is [d,a,b,c]
arr.shift(); o/p: d // now arr is [a,b,c];
arr.unshift('e'); o/p: 4 // now arr is ['e','a','b','c']


By default, the sort() function sorts values as strings.
arr = [1,4,39,21,100000];
arr.sort(); // [1, 100000, 21, 39, 4]
.
for sorting number we can provide a compare function like:
arr.sort((a,b) => a-b) // [1, 4, 21, 39, 100000]


console.log(+true / -true); // -1
console.log(1 - - true) // 2
let a = true + false; // a = 1
let b = 1 + true; // b = 2
console.log(a>b); // false


function testscope() {
if (true) {
const a = 10;
}
return a;
}
console.log(testscope()); // referenceError: a is not defined

console.log(null == undefined) // true
console.log(null == '') // false
console.log(null == 0) // false
console.log(NaN == NaN) // false
console.log(NaN === NaN) // false
console.log(null === undefined) // false

console.log([10,20,30,20,50][1]) // 20
console.log([10,20,30,20,50][2]) // 30
console.log([10,20,30,20,50][0]) // 10
console.log([10,20,30,20,50][4]) // 50

var a = 1, b = a = typeof b;console.log(a); // undefined
let a = 1, b = a = typeof b;console.log(a); // referrenceError: b is not defined

typeof undefined // "undefined"
typeof null // "object"
typeof Object // "function"
typeof object // "undefined"  ....(hint: small o)

function abs () {};
typeof abs // "function"
var a = {name: "rohit"};
typeof a // "object"
a instanceof Object // true
a instanceof Function // false
abs instanceof Object // true
abs instanceof Function // true


let a=2, b=7;
console.log(a + (--b + a) + b++); // 16

let a = 10, b=20;
a=a+b; b =a-b;, a=a-b;// swaping without using third variable

console.log('1' - - '1'); or console.log('1'- -'1') // 2

let arr = [1,2,3,4,5]; arr.legnth//5
arr.pop();// 5 and arr.lenght//4
arr.length = 1;// now arr is [1];
arr.length = 6;
console.log(arr)//[1, empty x 5]
arr.toString(); // "1,,,,,";

var a = 6; var b = a ^ 2 * 2;
console.log(a,b); // 6 2 // mulitplication (*) has more precedence to xor (^)
console.log(1^1*3) // 2

console.log('1' == '01'); // false
console.log(true == '1'); // true
console.log(true == '001');// true
console.log(false == '000'); // true
console.log(1 == '1'); // true
console.log(10 == 5+5); // ture
console.log(10 == '5+5');// false

let ab = "a,b,c,d";
output required "a.b.c.d";
ab.replaceAll(",", "."); // one way
ab.split(",").join("."); // other way


function* abc() {
  return 5;
}
let ab = abc();
ab.next(); // {value: 5, done: true}
ab.next(); // {value: undefined, done: true}

function* abc() {
  yield 5;
}
let ab = abc();
ab.next(); // {value: 5, done: false}
ab.next(); // {value: undefined, done: true}
// before done: true, generatorState is suspended, after done:true generatorState is closed

Math.pow(2,3); // 8
in short 2**3 // 8

var val = "123" or "134.788"
console.log(Math.floor(val)) // 123 or 134
in short ~~val // 123 or 134

let arr = [1,2,3];
delete arr; // no effect, this will return false
conosle.log(arr); // [1, 2, 3]
delete arr[1]; // this will return true;
console.log(arr); // [1, empty, 3]

let ab = 'rohit';
delete ab;// no effect, this will return false
console.log(ab); // rohit


let ab = [1,2,[3,4,[5,6,7]]];
ab.flat() // output  [1,2,3,4,[5,6,7]];
ab.flat(Infinity) // output [1, 2, 3, 4, 5, 6, 7]
let ab = "rohit";
console.log([...ab]); //output ['r', 'o', 'h', 'i', 't']

filter() returns an array of matched objects while find() will return the first matched object

every() spits back a boolean.This makes it good for quickly checking whether everything inside an array meets the criteria
let animals = [
    {name: 'Tibbers', type: 'cat', isNeutered: true, age: 2},
    {name: 'Fluffball', type: 'rabbit', isNeutered: false, age: 1},
    {name: 'Strawhat', type: 'cat', isNeutered: true, age: 5}
  ]
let allNeutered = animals.every(animal => {return animal.isNeutered});
console.log(allNeutered) // false
 animals = [
    {name: 'Tibbers', type: 'cat', isNeutered: true, age: 2},
    {name: 'Fluffball', type: 'rabbit', isNeutered: true, age: 1},
    {name: 'Strawhat', type: 'cat', isNeutered: true, age: 5}
  ]
console.log(animals.every(animal => {return animal.isNeutered}));  // true

some() works the same way as every() but only at least one of the conditions needs to evaluate to true.


const arr = [10,20,10,40];
const arr2 = [10,20,40,50,17];
console.log(...new Set([...arr, ...arr2])); // 10 20 40 50 17
check the following in console.. console.log(new Set([...arr, ...arr2]));

https://javascript.info/map-set
Map:
Map is a collection of keyed data items, just like an Object.
But the main difference is that Map allows keys of any type.
new Map() – creates the map.
map.set(key, value) – stores the value by the key.
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map.
map.has(key) – returns true if the key exists, false otherwise.
map.delete(key) – removes the value by the key.
map.clear() – removes everything from the map.
map.size – returns the current element count.
map.keys() returns an iterable, but not an array. To convert that into iterable.... Array.from(map.keys())

map[key] isn’t the right way to use a Map
Although map[key] also works, e.g. we can set map[key] = 2,
this is treating map as a plain JavaScript object, so it implies all corresponding
limitations (no object keys and so on).
So we should use map methods: set, get and so on

How Map compares keys
To test keys for equivalence, Map uses the algorithm SameValueZero.
It is roughly the same as strict equality ===, but the difference is that NaN is considered equal to NaN.
So NaN can be used as the key as well.
This algorithm can’t be changed or customized.

Chaining
Every map.set call returns the map itself, so we can “chain” the calls:
let map= new Map();
map.set('1', 'str1').set(1, 'num1').set(true, 'bool1');


Set:
A Set is a special type collection – “set of values” (without keys),
where each value may occur only once.

Its main methods are:
new Set(iterable) – creates the set, and if an iterable object is provided (usually an array),
  copies values from it into the set.
set.add(value) – adds a value, returns the set itself.
set.delete(value) – removes the value, returns true if value existed at the moment of the call,
  otherwise false.
set.has(value) – returns true if the value exists in the set, otherwise false.
set.clear() – removes everything from the set.
set.size – is the elements count.

The main feature is that repeated calls of set.add(value) with the same value don’t do anything.
  That’s the reason why each value appears in a Set only once.

question on set
function unique(arr) {
  /* your code */
}
let values = ["Hare", "Krishna", "Hare", "Krishna",
  "Krishna", "Krishna", "Hare", "Hare", ":-O"
];
alert( unique(values) ); // Hare, Krishna, :-O
--------------------------------------------------------
question
let arr = ["nap", "teachers", "cheaters", "PAN", "ear", "era", "hectares"];
function aclean(arr) {
???
};
alert( aclean(arr) ); // "nap,teachers,ear" or "PAN,cheaters,era"

hint...using map
---------------------------------------------------------

for...in, used to loop over an enumerable
for...of, used to loop over an iterable

An iterable has an internal order to the pieces whereas an enumerable has distinct parts,
but they are unordered. eg:
•A pile of books is an enumerable
•A row of books on a shelf is an iterable
•JSON objects are enumerables
•JSON arrays are iterables
all iterables are enumerables; however, not all enumerables are iterables

let scores = [43,58,28,69,38];
for(const item in scores) {
   console.log(item);
}
/*
"0"
"1"
"2"
"3"
"4"
*/


Nullish coalescing operator '??'
|| returns the first truthy value.
?? returns the first defined value
let height = 0;
alert(height || 100); // 100
alert(height ?? 100); // 0


let a = new Number(100);
let b = parseInt(100);
console.log(a == b); // true
console.log(a === b); // false
a // Number{100}
b // 100


Modules: https://javascript.info/modules-intro
what is module : ->
A module is just a file. One script is one module. As simple as that.
Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:
export keyword labels variables and functions that should be accessible from outside the current module.
import allows the import of functionality from other modules.

To summarize, the core concepts are:
A module is a file. To make import/export work, browsers need <script type="module">. Modules have several differences:
  Deferred by default.
  Async works on inline scripts.
  To load external scripts from another origin (domain/protocol/port), CORS headers are needed.
  Duplicate external scripts are ignored.
  Modules have their own, local top-level scope and interchange functionality via import/export.
  Modules always use strict.
  Module code is executed only once. Exports are created once and shared between importers.



// static methods and factory method as well
class Article {
  constructor(title, date) {
    this.title = title;
    this.date = date;
  }
  static createTodays() {
    // remember, this = Article
    return new this("Today's digest", new Date());
  }
}
let article = Article.createTodays();
alert( article.title ); // Today's digest


Static methods are used for the functionality that belongs to the class “as a whole”.
It doesn’t relate to a concrete class instance. For example, a method for comparison Article.compare(article1, article2)
or a factory method Article.createTodays().

syntax:
class MyClass {
  static property = ...;
  static method() {
    ...
  }
}

In terms of OOP, delimiting of the internal interface from the external one is called encapsulation.

Normally, when one class extends another, both static and non-static methods are inherited.
But built-in classes are an exception. They don’t inherit statics from each other.


As defined in Wikipedia, a mixin is a class containing methods that can be used by other classes without a need to inherit from it.
In other words, a mixin provides methods that implement a certain behavior, but we do not use it alone,
we use it to add the behavior to other classes. https://javascript.info/mixins

----------------------------------------STRING METHODS-----------------------------------------------------
String methods in javascript:
let ab = "rohit";
ab.charAt(); or ab.charAt(0); // output = r
ab.charAt(1); // output = o 

ab.charCodeAt(0) or ab.charCodeAt(); // output = 114 as ascii value of r is 114
ab.charCodeAt(3); //output = 105 as ascii valye of i is 105

let abc = "rahul;
ab.concat(abc); // output = rohitrahul and ab is still "rohit" and abc is still "rahul"

endsWith()	Returns if a string ends with a specified value
ab.endsWith("rohit") or ab.endsWith("t") // output = true
ab.endsWith("r") or ab.endsWith("ohi") // output = false

fromCharCode()	Returns Unicode values as characters
String.fromCharCode(104); //output = h 
String.fromCharCode(114); //output = r 

includes()	Returns true if a string contains a specified value
indexOf()	Returns the index (position) of the first occurrence of a value in a string  // index of first element is 0
lastIndexOf()	Returns the index (position) of the last occurrence of a value in a string
split()	Splits a string into an array of substrings
slice()	Extracts a part of a string and returns a new string
eg: ab.slice(3,4)// output = i where ab = rohit

match()	Searches a string for a value, or a regular expression, and returns the matches
repeat()	Returns a new string with a number of copies of a string
if ab = "rohit" then ab.repeat() will return '', ab.repeat(1) will return "rohit" , ab.repeat(2) will return "rohitrohit"

replace()	Searches a string for a value, or a regular expression, and returns a string where the values are replaced
search()	Searches a string for a value, or regular expression, and returns the index (position) of the match

startsWith()	Checks whether a string begins with specified characters
trim()	Returns a string with removed whitespaces
substr()	Extracts a number of characters from a string, from a start index (position)
eg ab.substr(3,1) // output i
substring()	Extracts characters from a string, between two specified indices (positions)
let text = "Hello world!";
let result = text.substring(0, 4); or text.substring(4,0);
output would be Hell

----------------------------------------STRING METHODS ENDS-----------------------------------------------------

Common array mthods ........................................
concat()	Joins arrays and returns an array with the joined arrays
entries()	Returns a key/value pair Array Iteration Object
every()	Checks if every element in an array pass a test
filter()	Creates a new array with every element in an array that pass a test
find()	Returns the value of the first element in an array that pass a test
findIndex()	Returns the index of the first element in an array that pass a test
forEach()	Calls a function for each array element
from()	Creates an array from an object
Array.from({length: 5}, (a, ind) => ind); //output : [0,1,2,3,4];
Array.from("rohit"); //output: ["r","o","h","i","t"];

includes()	Check if an array contains the specified element
indexOf()	Search the array for an element and returns its position
isArray()	Checks whether an object is an array
join()	Joins all elements of an array into a string
eg: let ab = ["r","o","h","i","t"]; then ab.join() would be "r,o,h,i,t"
and ab.join(".") would be "r.o.h.i.t"

length	Sets or returns the number of elements in an array
map()	Creates a new array with the result of calling a function for each array element
pop()	Removes the last element of an array, and returns that element
push()	Adds new elements to the end of an array, and returns the new length
reduce()	Reduce the values of an array to a single value (going left-to-right)
  > array.reduce(function(total, currentValue, currentIndex, arr), initialValue)
reduceRight()	Reduce the values of an array to a single value (going right-to-left)
reverse()	Reverses the order of the elements in an array
shift()	Removes the first element of an array, and returns that element
slice()	Selects a part of an array, and returns the new array
some()	Checks if any of the elements in an array pass a test
sort()	Sorts the elements of an array

splice()	Adds/Removes elements from an array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi"); // output []
fruits array got updated....now fruits is ['Banana', 'Orange', 'Lemon', 'Kiwi', 'Apple', 'Mango']
fruits.splice(2, 2); //output ['Lemon', 'Kiwi']
fruits is now ['Banana', 'Orange', 'Apple', 'Mango']

toString()	Converts an array to a string, and returns the result
unshift()	Adds new elements to the beginning of an array, and returns the new length


class Clock1 extends Component {
  constructor(props) {
    super();
    console.log(this.props) // will be undefined as props is not passed to super
  }
  console = (item, ab) => console.log(item, ab);
  componentDidMount() {
    console.log(this) // here props would be accessible using this.props, doestnt matter props is passed in super or not
    this.props.arr.map(function(item){this.console(item, this)})  // this line throws error as this is undefinfed here
    this.props.arr.map(function(item){this.console(item, this)}, this)  // this would work as we are passing this to map funciton as 2nd param that preserve the current context
    this.props.arr.map(item => this.console(item, this)) // this will execute correctly here this is pointing to class's this
  }
  render() {
    return (
        <div>
          <h1> {this.props.arr.length} </h1>
        </div>
    );
  }
}


<-----------------------------------------------------------------Promise------------------------------------------------------------------>
var promise1 = (timeInMilisec) => {
  return new Promise(function(resolve, reject) {
    if (timeInMilisec%2000 === 0) {
      setTimeout(function() {
        resolve(`resolving after ${timeInMilisec/1000} seconds`);
      }, timeInMilisec);
    } else {
      reject(`rejecting ${timeInMilisec}`);
    }
  });
}

Promise.all([
  promise1(2000),promise1(2000),promise1(2000)]).then(val => {
  console.log(val, Array.isArray(val))
}).catch(err => console.log(`rejected--  ${err}`));
output would be :
[
  'resolving after 2 seconds',
  'resolving after 2 seconds',
  'resolving after 2 seconds'
] true

Promise.all([
  promise1(2000),promise1(1000),promise1(2000)]).then(val => {
  console.log(val, Array.isArray(val))
}).catch(err => console.log(`rejected--  ${err}`));
output would be : rejected--  rejecting 1000

Promise.allSettled([
  promise1(2000),promise1(1000),promise1(2000)]).then(val => {
  console.log(val, Array.isArray(val))
}).catch(err => console.log(`rejected--  ${err}`));
output would be: 
[
  { status: 'fulfilled', value: 'resolving after 2 seconds' },
  { status: 'rejected', reason: 'rejecting 1000' },
  { status: 'fulfilled', value: 'resolving after 2 seconds' }
] true


Promise.any([
  promise1(2000),promise1(1000),promise1(10000)]).then(val => {
  console.log(val, Array.isArray(val), typeof(val))
}).catch(err => console.log(`rejected--  ${err}`));
output: // resolving after 2 seconds false string

promise.finally(() => {
  // Code that will run after promise is settled (fulfilled or rejected)
});

Promise.race([
  promise1(2000),promise1(1000),promise1(10000)]).then(val => {
  console.log(`fulfilled--  ${val}`);
  console.log(val, Array.isArray(val), typeof(val))
}).catch(err => console.log(`rejected--  ${err}`)).finally((val) => {
  console.log("finally block")
});
output://
rejected--  rejecting 1000
finally block

-----------------------------------------------------------------------------------------------------------------------------------

let x= {}, y = {name:"Ronny"},z = {name:"John"};
x[y] = {name:"Vivek"};
x[z] = {name:"Akki"};
console.log(x[y]);
Output will be {name: “Akki”}.
Adding objects as properties of another object should be done carefully.
Writing x[y] = {name:”Vivek”} , is same as writing x[‘object Object’] = {name:”Vivek”} ,
While setting a property of an object, javascript coerces the parameter into a string.
Therefore, since y is an object, it will be converted to ‘object Object’.
Both x[y] and x[z] are referencing the same property.

In JavaScript, how do you turn an Object into an Array []?
let obj = { id: "1", name: "user22", age: "26", work: "programmer" };
console.log(Object.entries(obj));
//[["id", "1"],["name", "user22"],["age", "26"],["work", “programmer"]]

function doSomething() {}
console.log(doSomething.prototype);
//  It does not matter how you declare the function; a
//  function in JavaScript will always have a default
//  prototype property — with one exception: an arrow
//  function doesn't have a default prototype property:
const doSomethingFromArrowFunction = () => {};
console.log(doSomethingFromArrowFunction.prototype);

The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties
as non-configurable. Values of present properties can still be changed as long as they are writable.
const object1 = {
  property1: 42
};
Object.seal(object1);
object1.property1 = 33;
console.log(object1.property1);
// expected output: 33
delete object1.property1; // cannot delete when sealed
console.log(object1.property1);
// expected output: 33
Existing properties in objects frozen with Object.freeze() are made immutable. Objects sealed with Object.seal() can have their existing properties changed.

The Object.freeze() method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties 
from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, 
or writability of existing properties, and prevents the values of existing properties from being changed. In addition, 
freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in.
let a = [0];
Object.freeze(a); // The array cannot be modified now.

const obj = {
  prop: 42
};
Object.freeze(obj);
obj.prop = 33;
// Throws an error in strict mode
console.log(obj.prop);
// expected output: 42
