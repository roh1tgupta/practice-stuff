The Node.js or node come bundled with REPL environment. Each part of the REPL environment has a specific work.
Read: It reads user's input; parse the input into JavaScript data-structure and stores in memory.
Eval: It takes and evaluates the data structure.
Print: It prints the result.
Loop: It loops the above command until user press ctrl-c twice.

You can start REPL by simply running "node" on the command prompt.

Commands	Description
ctrl + c	It is used to terminate the current command.
ctrl + c twice	It terminates the node repl.
ctrl + d	It terminates the node repl.
up/down keys	It is used to see command history and modify previous commands.
tab keys	It specifies the list of current command.
.help	It specifies the list of all commands.
.break	It is used to exit from multi-line expressions.
.clear	It is used to exit from multi-line expressions.
.save filename	It saves current node repl session to a file.
.load filename	It is used to load file content in current node repl session.


Global vs Local Installation:
By default, npm installs dependency in local mode. Here local mode specifies the folder where Node application is present. For example if you installed express module, it created node_modules directory in the current directory where it installed express module.
You can use npm ls command to list down all the locally installed modules.
eg>npm install express  
Globally installed packages/dependencies are stored in system directory. Let's install express module using global installation. Although it will also produce the same result but modules will be installed globally.
eg>npm install express -g

To uninstall a Node.js module, use the following command:
eg>npm uninstall express  

"npm search express" command is used to search express or module.
eg>npm search express



Index	Method	Description
1.	os.arch()	This method is used to fetch the operating system CPU architecture.
2.	os.cpus()	This method is used to fetch an array of objects containing information about each cpu/core installed: model, speed (in MHz), and times (an object containing the number of milliseconds the cpu/core spent in: user, nice, sys, idle, and irq).

3.	os.endianness()	This method returns the endianness of the cpu. Its possible values are 'BE' for big endian or 'LE' for little endian.
4.	os.freemem()	This methods returns the amount of free system memory in bytes.
5.	os.homedir()	This method returns the home directory of the current user.
6.	os.hostname()	This method is used to returns the hostname of the operating system.
7.	os.loadavg()	This method returns an array containing the 1, 5, and 15 minute load averages. The load average is a time fraction taken by system activity, calculated by the operating system and expressed as a fractional number.
8.	os.networkinterfaces()	This method returns a list of network interfaces.
9.	os.platform()	This method returns the operating system platform of the running computer i.e.'darwin', 'win32','freebsd', 'linux', 'sunos' etc.
10.	os.release()	This method returns the operating system release.
11.	os.tmpdir()	This method returns the operating system's default directory for temporary files.
12.	os.totalmem()	This method returns the total amount of system memory in bytes.
13.	os.type()	This method returns the operating system name. For example 'linux' on linux, 'darwin' on os x and 'windows_nt' on windows.
14.	os.uptime()	This method returns the system uptime in seconds.
15.	os.userinfo([options])	This method returns a subset of the password file entry for the current effective user.



The Node.js applications generally face four types of errors:
>Standard JavaScript errors i.e. <EvalError>, <SyntaxError>, <RangeError>, <ReferenceError>, <TypeError>, <URIError> etc.
>System errors
>User-specified errors
>Assertion errors





https://blog.cloudboost.io/event-driven-programming-with-nodejs-net-and-events-9e4e14f561f3  for socket